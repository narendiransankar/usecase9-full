name: CI/CD Pipeline - Build, Infra Provision, Deploy

on:
  # push:
  #   branches: [ "main" ]
  # pull_request:
  #   branches: [ "*" ]
  workflow_dispatch: 

permissions:
  contents: read
  id-token: write
  pull-requests: write

env:
  AWS_ACCOUNT_ID: 012889719104
  AWS_REGION: ap-south-1
  ECR_REPO_NAME: api-flask-repo
  CLUSTER_NAME: api-flask-cluster

jobs:
  # ───────────────────────────────────────────────────────
  # 1️⃣ Build & Push Docker Image
  build-push-image:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/oidc_role
          aws-region: ${{ env.AWS_REGION }}

      - uses: aws-actions/amazon-ecr-login@v2

      - name: Ensure ECR Repo
        run: |
          aws ecr describe-repositories --repository-names "$ECR_REPO_NAME" || \
          aws ecr create-repository --repository-name "$ECR_REPO_NAME"

      - name: Build Image
        run: docker build -t $ECR_REPO_NAME:latest ./Api-Flask

      - name: Tag & Push
        run: |
          REG="${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com"
          docker tag $ECR_REPO_NAME:latest $REG/$ECR_REPO_NAME:v1
          docker push $REG/$ECR_REPO_NAME:v1

  # ───────────────────────────────────────────────────────
  # 2️⃣ Terraform IaC (two-phase)
  terraform:
    needs: build-push-image
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/oidc_role
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with: 
          terraform_version: 1.5.0

      # Phase 1 ── Core Infra (VPC, ECR, EKS, IAM)
      - name: Terraform Init
        run: terraform init

      - name: Plan Core Infra
        run: terraform plan -out=infra.tfplan \
          -target=module.vpc \
          -target=module.ecr \
          -target=module.eks \
          -target=module.iam

      - name: Apply Core Infra
        run: terraform apply -auto-approve infra.tfplan

      # Phase 2 ── In-cluster Add-ons (Monitoring, Ingress Controller)
      - name: Plan In-Cluster Add-ons
        run: terraform plan -out=k8s.tfplan

      - name: Apply In-Cluster Add-ons
        run: terraform apply -auto-approve k8s.tfplan

  # ───────────────────────────────────────────────────────
  # 3️⃣ Deploy Application Manifests
  deploy:
    needs: terraform
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/oidc_role
          aws-region: ${{ env.AWS_REGION }}

      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: latest      

      - name: Update kubeconfig
        run: aws eks update-kubeconfig --name ${{ env.CLUSTER_NAME }} --region ${{ env.AWS_REGION }}

      - name: kubectl apply Manifests
        run: |
          kubectl apply -f k8s/deployment.yaml
          kubectl apply -f k8s/service.yaml
          kubectl apply -f k8s/ingress.yaml

      - name: Verify Rollout
        run: kubectl rollout status deployment/api-flask-deployment --timeout=60s
